package chapter10.case13;

/**
 * 使用内部类的原因：
 *
 * 1 内部类的使用方式，一般是继承自某个类C或者某个接口I。
 * 同时内部类拥有外围类对象，可以操纵外围类OutC的元素，所以
 * 我们可以通过内部类，使得通过操纵C和I来达到操作OutC的目的。
 *
 * 2 每个内部类都能独立地继承自一个接口的实现，所以无论外围类
 * 是否已经继承了某个接口的实现，对内部类都没有影响。
 * (首先，可以做到让类继承多个类（多个内部类分别继承不同的类；
 * 其次，外围类继承什么和内部类继承什么是完全隔离的，不会互相
 * 影响。）)
 *
 *
 * 内部类的一些其他特性：
 *
 * 1 内部类可以有多个实例，每个实例有自己的状态信息，并且与其
 * 外部类对象的信息相互独立。
 *
 * 2 在单个外围类中，可以让多个内部类以不同方式实现同一个接口
 * 或者继承同一个类
 *
 * 3 创建内部类对象的时刻并不依赖于外围类对象的创建（内含的
 * 外围类对象可以为空）
 *
 * 4 内部类与外围类并非是"is-a"的关系，而是一个独立的实体。
 */
public class MultiInterfaces {

    static void takesA(A a){}
    static void takesB(B b){}

    public static void main(String[] args){
        X x = new X();
        Y y = new Y();
        takesA(x);
        takesA(y);
        takesB(x);
        takesB(y.makeB());

    }
}
